# Generated by Django 3.2.9 on 2021-11-17 14:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='clusterState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numberOfQubits', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('graphState', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ComputeSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clusterState', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdl_rest_api.clusterstate')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experimentName', models.CharField(max_length=255)),
                ('projectId', models.CharField(max_length=255)),
                ('maxRuntime', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('ComputeSettings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdl_rest_api.computesettings')),
            ],
        ),
        migrations.CreateModel(
            name='qubitComputing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circuitConfiguration', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('experimentbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cdl_rest_api.experimentbase')),
                ('experimentId', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
            ],
            bases=('cdl_rest_api.experimentbase',),
        ),
        migrations.CreateModel(
            name='QubitMeasurementItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encodedQubitIndex', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('theta', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('phi', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('ComputeSettings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encodedQubitMeasurements', to='cdl_rest_api.computesettings')),
            ],
        ),
        migrations.AddField(
            model_name='computesettings',
            name='qubitComputing',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdl_rest_api.qubitcomputing'),
        ),
        migrations.CreateModel(
            name='CircuitConfigurationItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('circuitAngleName', models.CharField(max_length=255)),
                ('circuitAngleValue', models.DecimalField(decimal_places=3, max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('qubitComputing', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='circuitAngles', to='cdl_rest_api.qubitcomputing')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startTime', models.DateTimeField(auto_now_add=True)),
                ('totalCounts', models.PositiveIntegerField()),
                ('numberOfDetectors', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('singlePhotonRate', models.DecimalField(decimal_places=2, max_digits=8)),
                ('totalTime', models.PositiveIntegerField()),
                ('experiment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdl_rest_api.experiment')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
    ]
